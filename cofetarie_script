--create database Cofetarie

create table Cofetarie 
(
	IdCofetarie int primary key,
	Nume varchar(30) not null,
	Locatie varchar(30) not null
) 

--drop table Cofetarie cascade
insert into Cofetarie values (1, 'Vivien','Craiova');
insert into Cofetarie values (2, 'Amandina', 'Filiasi');
insert into Cofetarie values (3, 'RIO', 'Craiova');
insert into Cofetarie values (4, 'Arkadia', 'Brasov');
insert into Cofetarie values (5, 'Sweet Escape', 'Sibiu');
insert into Cofetarie values (6, 'Eugenia', 'Bucuresti');
insert into Cofetarie values (7,'Bella', 'Arad');
insert into Cofetarie values (8, 'Cakes', 'Timisoara');
insert into Cofetarie values (9, 'Boromir', 'Podari');
insert into Cofetarie values (10, 'Dessert Time', 'Constanta');

select *from Cofetarie;

create table Angajati
(
	IdAngajat int primary key,
	Nume varchar(30) not null,
	Prenume varchar(30) not null,
	Salariu int,
	IdCofetarie int,
	IdFunctie int
)
insert into Angajati values (1, 'Popa', 'Robert', 5000, 1, 3);
insert into Angajati values (2, 'Andrei', 'Marius', 8000, 6, 10);
insert into Angajati values (3, 'Frunzulita', 'Mihnea', 4000, 1, 1);
insert into Angajati values (4, 'Ionescu', 'Rica', 2500, 7, 2);
insert into Angajati values (11, 'Crenguta', 'Mihai', 3000, 2, 4);
insert into Angajati values (12, 'Dumitru', 'Daniel',4500, 1, 4);
insert into Angajati values (13, 'Vanghelie', 'Marian',4300, 5, 4);
insert into Angajati values (5, 'Patrascu', 'Niculina', 5000, 9, 5);
insert into Angajati values (6, 'Petrescu', 'Liviu', 9000, 10, 6);
update Angajati set Salariu = 9000 where IdAngajat = 6;
insert into Angajati values (7, 'Hora', 'George', 1000, 3, 7);
insert into Angajati values (8, 'Radu', 'Adrian', 4000, 4, 8);
insert into Angajati values (9, 'Popa', 'Beti', 10000, 4, 9);
insert into Angajati values (14, 'Popa', 'Ana', 10500, 3, 9);
update Angajati set Salariu = 8000 where IdAngajat = 14;
insert into Angajati values (18, 'Puya', 'Kamelia-George', 1500, 2, 1);
insert into angajati values (19, 'Ariana', 'Grande', 2300, 2, 4);
insert into angajati values (20, 'Sticluta', 'Marinela', 7700, 2, 6);
insert into Angajati values (10, 'Frunzulita', 'Ovi', 5000, 2, 10);
update Angajati set IdFunctie = 10 where IdAngajat = 9
insert into Angajati values (15, 'Veverita', 'Manole', 200000, 9, 10);
update angajati set salariu = 210000 where idangajat = 15;
insert into Angajati values (16, 'Pensula', 'Ramona', 5670, 5, 4);
insert into Angajati values (17, 'Albastrea', 'Mirela', 7612, 7, 6);
delete from angajati where idangajat = 17;

select *from angajati order by idangajat desc

--suma salariilor tututor angajatilor, salariul maxim, minim si mediu
select sum(salariu), max(salariu), min(salariu), avg(salariu) from angajati

--nr total de salarii distincte din cofetarie
select count (distinct salariu) from angajati

-- --numele si prenumele angajatilor care lucreaza la cofetaria Vivien
-- Select cofetarie.nume, angajati.nume, angajati.prenume, idangajat from angajati, cofetarie where angajati.idangajat = angajati.idcofetarie and 
-- cofetarie.nume = 'Vivien' 

select * from Angajati
--drop table Angajati

ALTER TABLE Angajati ADD CONSTRAINT
FK_IdCofetarie FOREIGN KEY (IdCofetarie) REFERENCES Cofetarie(IdCofetarie) on delete cascade on update cascade

ALTER TABLE Angajati ADD CONSTRAINT
FK_IdFunctie FOREIGN KEY (IdFunctie) REFERENCES Functie(IdFunctie) on delete cascade on update cascade

create table Functie 
(
	IdFunctie int primary key,
	DenumireFunctie varchar(30),
	Atributii varchar(100)
)
insert into Functie values (1, 'Ajutor de  cofetar', 'ajuta cofetarul');
insert into Functie values (2, 'Om de serviciu', 'mentine curatenia');
insert into Functie values (3, 'Cofetar', 'pregateste delicatesele');
insert into Functie values (4, 'Livrator', 'livreaza comenzile');
insert into Functie values (5, 'Chelner', 'aduce delicatesele la masa');
insert into Functie values (6, 'Picolo', 'ajuta chelnerul');
insert into Functie values (7, 'Manipulator de marfa', 'aduce produse/ingrediente');
insert into Functie values (8, 'Casier', 'incaseaza banii');
insert into Functie values (9, 'Manager', 'pregateste bonurile de masa');
insert into Functie values (10, 'Patron', 'conduce afacerea');
insert into Functie values (11, 'Contabil', 'tine evidenta produselor/banilor');

select * from Functie
create table Produs
(
	IdProdus int primary key,
	DenumireProdus varchar(30) not null,
	TipProdus varchar(30) not null,
	Pret int,
	Gramaj varchar(30) not null,
	IdCofetarie int
)
drop table produs cascade

insert into Produs values (1, 'Amandina', 'Prajituri',6, '100g', 1);
insert into Produs values (11, 'Tort', 'Torturi',30, '300g', 1);
insert into Produs values (12, 'Chec', 'Prajituri',12, '350g', 1);
insert into Produs values (13, 'Pandispan cu visine', 'Prajituri',21, '102g', 1);
insert into Produs values (2, 'Clatita', 'Deserturi',3, '30g', 1);
insert into Produs values (3, 'Placinta', 'Foietaje',4.5, '75g', 2);
insert into Produs values (19, 'Carpati', 'Prajituri',5.5, '70g', 2);
insert into Produs values (15, 'Lava Cake', 'Prajituri',9, '100g', 2);
insert into Produs values (16, 'Poale-n brau', 'Foietaje',3.5, '60g', 2);
insert into Produs values (17, 'Briose', 'Prajituri',2.5, '85g', 2);
insert into Produs values (18, 'Negrese', 'Prajituri',5, '30g', 2);
delete from produs where denumireprodus = 'Negrese';
insert into Produs values (4, 'Ecler', 'Prajituri',4.5, '75g', 2);
insert into Produs values (5, 'Cozonac', 'Prajitura',9, '1.5kg', 3);
insert into Produs values (6, 'Saratele', 'Foietaje',1.5, '15g', 3);
insert into Produs values (7, 'Tort', 'Torturi',35, '5kg', 3);
insert into Produs values (8, 'Strudel', 'Foietaje', 3, '50g', 1);
insert into Produs values (9, 'Tiramisu', 'Prajituri', 12, '100g', 5);
insert into Produs values (10, 'Fursecuri cu ovaz', 'Fursecuri', 4, '25g', 7);
insert into Produs values (14, 'Rulada', 'Prajituri', 7, '76g', 1);
insert into Produs (IdProdus, DenumireProdus, TipProdus, Gramaj, IdCofetarie) values (20,'Cornulete', 'Foietaje', '15g', 9)

ALTER TABLE Produs ADD CONSTRAINT
FK_IdCofetarie FOREIGN KEY (IdCofetarie) REFERENCES Cofetarie(IdCofetarie) on delete cascade on update cascade

create table Ingrediente 
(
	IdIngredient int primary key,
	DenumireIngredient varchar(30),
	Stoc varchar(30)
)
insert into Ingrediente values (1, 'Cacao', '15 bucati');
insert into Ingrediente values (2, 'Dulceata de visine', '3 bucati');
insert into Ingrediente values (3, 'Branza', '100 de bucati');
insert into Ingrediente values (4, 'Crema de vanilie', '99 de bucati');
insert into Ingrediente values (5, 'Faina', '8 bucati');
insert into Ingrediente values (6, 'Ou', '13 bucati');
insert into Ingrediente values (7, 'Frisca', '9 bucati');
insert into Ingrediente values (8, 'Mere', '54 de bucati');
insert into Ingrediente values (9, 'Ness', '32 de bucati');
insert into Ingrediente values (10, 'Ovaz', '160 de bucati');
insert into Ingrediente values (11, 'Lapte', '1000 de bucati');
insert into Ingrediente values (12, 'Nuci', '20 de bucati');
insert into ingrediente values (13, 'ciocolata', '10 bucati');
delete from ingrediente where idingredient = 13;

drop table Ingrediente cascade

select * from Ingrediente

create table Contin
(
	IdIngredient int,
	IdProdus int,
	Cantitate varchar(30)
)

drop table Contin cascade

insert into Contin values (1, 1, '50g');
insert into Contin values (1, 7, '35g');
insert into Contin values (1, 9, '90g');
insert into Contin values (7, 1, '100g');
insert into Contin values (2, 2, '33g');
insert into Contin values (3, 3, '50g');
insert into Contin values (4, 4, '3g');
insert into Contin values (5, 5, '1kg');
insert into contin values (12, 12, '30g');
insert into contin values (12, 5, '15g');
insert into Contin values (6, 6, '50g');
insert into Contin values (7, 9, '90g');
insert into Contin values (7, 7, '200g');
insert into Contin values (8, 7, '50g');
insert into Contin values (11, 10, '25g');
insert into Contin values (11, 5, '10g');

select * from Contin

ALTER TABLE Contin ADD CONSTRAINT
FK_IdIngredient FOREIGN KEY (IdIngredient) REFERENCES Ingrediente(IdIngredient) on delete cascade on update cascade

ALTER TABLE Contin ADD CONSTRAINT
FK_IdProdus FOREIGN KEY (IdProdus) REFERENCES Produs(IdProdus) on delete cascade on update cascade

create table Comanda 
(
	NrComanda int primary key,
	IdProdus int,
	IdClient int,
	Cantitate int
)
drop table Comanda cascade

insert into Comanda values (200, 1, 6, 10);
insert into Comanda values (562, 2, 8, 15);
insert into Comanda values (13, 1, 2, 20);
insert into Comanda values (250, 3, 5, 11);
insert into Comanda values (578, 4, 6, 14);
insert into Comanda values (999, 7, 9, 21);
insert into Comanda values (700, 10, 7, 29);
insert into Comanda values (372, 2, 1, 34);
insert into Comanda values (110, 9, 1, 45);
insert into Comanda values (201, 4, 10, 3);
insert into Comanda values (202, 3, 8, 9);
insert into comanda values (207, 3, 10, 2);
insert into comanda values (209, 16, 9, 83);
insert into comanda values (210, 10, 4, 340);
insert into comanda values (222, 14, 5, 29);
insert into comanda values (204, 15, 5, 200);

ALTER TABLE Comanda ADD CONSTRAINT
FK_IdProdus FOREIGN KEY (IdProdus) REFERENCES Produs(IdProdus) on delete cascade on update cascade

ALTER TABLE Comanda ADD CONSTRAINT
FK_IdClient FOREIGN KEY (IdClient) REFERENCES Clienti(IdClient) on delete cascade on update cascade

create table Clienti
(
	IdClient int primary key,
	Nume varchar(30),
	Prenume varchar(30),
	NumarTelefon varchar(11)
)

drop table Clienti cascade

insert into Clienti values ('1', 'Pintilie', 'Dragos', 0722663451);
insert into Clienti values ('2', 'Oprea', 'Sonia', 0745728039);
insert into Clienti values ('3', 'Popa', 'Marian', 0733449999);
insert into Clienti values ('4', 'Frunza', 'George', 0795836039);
insert into Clienti values ('5', 'Mos', 'Craciun', 0399100100);
insert into Clienti values ('6', 'Udrica', 'Marioara', 0735128039);
insert into Clienti values ('7', 'Floricica', 'Mihaela', 0702030405);
insert into Clienti values ('8', 'Barbu', 'Ionut', 0765555000);
insert into Clienti values ('9', 'Popescu', 'Ovidiu', 0799665523);
insert into Clienti values ('10', 'Mihai', 'Viteazu', 0732188444);
insert into Clienti values ('11', 'Grigore', 'Bobel', 0732652444);

select * from Clienti

create table Factura
(
	NrComanda int,
	IdClient int,
	IdCofetarie int,
	Data date
)

drop table Factura

insert into Factura values (200, 6, 1, '07/04/2021');
insert into Factura values (201, 10, 2, '08/04/2021');
insert into Factura values (207, 10, 3, '08/04/2021');
update Factura set Data = '07/04/2021' where NrComanda = 201
insert into Factura values (202, 8, 4, '07/04/2021');
insert into Factura values (562, 8, 4, '10/10/2021');
insert into Factura values (250, 5, 5, '26/05/2021');
insert into Factura values (13, 2, 6, '14/10/2021');
insert into Factura values (578, 6, 7, '22/09/2021');
insert into Factura values (999, 9, 8, '18/01/2021');
insert into Factura values (700, 7, 9, '15/03/2021');
insert into Factura values (372, 1, 10, '28/02/2021');
insert into Factura values (110, 1, 11, '30/08/2021');
delete from factura where idcofetarie = 11;
update Factura set Data = '07/04/2021' where NrComanda = 201
insert into Factura values (209, 9, 8, '30/08/2021');
insert into Factura values (210, 4, 8, '30/08/2021');
insert into Factura values (222, 5, 8, '30/08/2021');
insert into Factura values (204, 5, 1, '30/08/2021');

select * from Factura

ALTER TABLE Factura ADD CONSTRAINT
FK_NrComanda FOREIGN KEY (NrComanda) REFERENCES Comanda(NrComanda) on delete cascade on update cascade

ALTER TABLE Factura ADD CONSTRAINT
FK_IdClient FOREIGN KEY (IdClient) REFERENCES Clienti(IdClient) on delete cascade on update cascade

ALTER TABLE Factura ADD CONSTRAINT
FK_IdCofetarie FOREIGN KEY (IdCofetarie) REFERENCES Clienti(IdClient) on delete cascade on update cascade

--venitul fiecarei comenzi(suma) (pret x cantitate = suma platita)
create view venit as select produs.DenumireProdus produs, pret pret, comanda.Cantitate cantitate, (produs.Pret * comanda.Cantitate) venit, factura.Data Data     
                     from produs, comanda, factura
					 where produs.IdProdus = comanda.IdProdus and comanda.NrComanda = factura.NrComanda	 
--drop view venit 
select * from venit	

--vizualizam cofetariile care au locatia in craiova si filiasi
create view locatii as 
select * from cofetarie
where locatie in ('Craiova', 'Filiasi')
 
select * from locatii 

--numele cofetariilor care au locatia in Craiova
select Nume
from cofetarie
where locatie LIKE '%Craiova%'

--numele si functia angajatilor care lucreaza la cofetaria 1
select nume, prenume, idcofetarie
from angajati
where IdCofetarie = 1

--numele si prenumele angajatilor care sunt patroni, din toate cofetariile
select nume, prenume, denumirefunctie, idcofetarie
from angajati, functie
where functie.IdFunctie = 10 AND angajati.IdFunctie = 10
order by idcofetarie asc

--afisarea angajatilor care au salariul cuprins intre 1000-4000 lei
--cu ordonare descrescatoare pentru salariu
select Nume, Prenume, Salariu, IdCofetarie, IdFunctie
from Angajati
where (Salariu between 1000 and 4000)
order by  Salariu desc

--afisarea produselor care contin ingredientele cacao sau frisca - 1 si 7
select distinct produs.idprodus, produs.denumireprodus
from contin inner join produs on produs.idprodus = contin.idprodus
where contin.idingredient = 7 or contin.idingredient = 1

--afisarea cofetariilor care prepara mai mult de 6 produse
select distinct nume
from cofetarie, produs
where cofetarie.idcofetarie in (select  distinct produs.idcofetarie
					  from produs
					  group by produs.idcofetarie
					  having count(*) >=6)

--numele angajaților cu salariul mai mare decât
--al tuturor angajaților din cofetaria 2
SELECT Nume, Prenume, idcofetarie, salariu
FROM Angajati
WHERE Salariu > ALL (SELECT Salariu FROM Angajati WHERE IdCofetarie = 2);


--afiseaza numele produseleor care au gramajul de 50g       
SELECT denumireprodus 
FROM produs 
where idprodus = any (SELECT idprodus
					  FROM contin
					  WHERE cantitate = '50g');

--afiseaza toate comenzile cu o cantitate mai mica
--decat cantitatea maxima de torturi (id 7) comandata (21)
SELECT nrcomanda, idclient, cantitate
FROM comanda
WHERE cantitate < ANY (SELECT cantitate
                       FROM comanda
                       WHERE idprodus = 7)
order by cantitate asc

--afiseaza denumirea produsului unde cantitatea > 21
SELECT denumireprodus
FROM produs
WHERE idprodus = ANY (SELECT idprodus
                       FROM comanda
                       WHERE cantitate > 21);

--afiseaza salariile minime mai mari 
--decat (salariile minime pana la idfunctie = 5)
SELECT idfunctie, MIN(salariu)
FROM angajati
GROUP BY idfunctie
HAVING MIN(salariu) > ALL (SELECT MIN(salariu)
                           FROM angajati
                           WHERE idfunctie < 5
                           GROUP BY idfunctie)

--salariul maxim, salariul minim, media si suma salariilor de la cofetaria 1 (Vivien)
select sum(salariu), avg(salariu), max(salariu), min(salariu)
from angajati inner join cofetarie on angajati.idcofetarie = cofetarie.idcofetarie
where cofetarie.idcofetarie = 1

--numele tuturor angajatilor si functiile lor, 
--chiar daca unii angajati nu au momentan functie
SELECT angajati.nume, functie.idfunctie
FROM angajati
FULL OUTER JOIN functie ON angajati.idangajat=functie.idfunctie
ORDER BY angajati.nume;

--afisarea nr comenzii, numele clientilor,
--data la care s-a efectuat comanda
SELECT factura.nrcomanda, clienti.nume, clienti.prenume, factura.data
FROM factura
INNER JOIN clienti ON factura.idclient = clienti.idclient;

--afisam numele clientilor si nr comenzii fiecaruia
--chiar daca unii clienti nu au dat inca o comanda
SELECT clienti.nume, clienti.prenume, factura.nrcomanda
FROM clienti
LEFT JOIN factura ON clienti.idclient = factura.idclient
ORDER BY factura.nrcomanda

--toate produsele de la toate cofetariile, precum si pretul fiecaruia
--ordonat crescator (apar si cele care nu au pret inca)
SELECT produs.denumireprodus, produs.pret, produs.idcofetarie
FROM produs
FULL OUTER JOIN cofetarie ON produs.idprodus=cofetarie.idcofetarie
ORDER BY produs.denumireprodus asc

--cauta comenzile facute si id-urile produselor din comenzi
--apoi afiseaza tot tabelul produs in care se afla aceste comenzi
--impreuna cu id-urile produselor din comenzi, denumirea produselor etc
SELECT * FROM produs
WHERE idprodus IN (SELECT idprodus FROM comanda);

--numaram comenzile facute de la fiecare cofetarie
--si grupam dupa numele cofetariei
SELECT cofetarie.nume, COUNT(factura.nrcomanda) AS nr_comenzi FROM factura
LEFT JOIN cofetarie ON factura.idcofetarie = cofetarie.idcofetarie
GROUP BY cofetarie.nume

select * from produs

--numele clientilor care au comandat produse
--cu pretul de peste 30 de lei
SELECT *
FROM clienti
WHERE EXISTS (SELECT idprodus
              FROM produs
              WHERE produs.idprodus = clienti.idclient AND pret > 30)

--o vedere in care ni se afiseaza denumirea produselor
--care au pretul mai mare decat pretul mediu
CREATE VIEW produse_peste_pretul_mediu AS
SELECT denumireprodus, pret
FROM produs
WHERE pret > (SELECT AVG(pret) FROM produs);

select * from produse_peste_pretul_mediu

--numaram cati angajati lucreaza la fiecare cofetarie
--si grupam dupa numele cofetariei
SELECT cofetarie.nume, COUNT(angajati.idcofetarie) AS nr_angajati FROM angajati
LEFT JOIN cofetarie ON angajati.idcofetarie = cofetarie.idcofetarie
GROUP BY cofetarie.nume

--id-ul si numele angajatilor care castiga mai mult decat salariul mediu
select idangajat, nume, salariu
from angajati
where salariu> (SELECT AVG(salariu)
                FROM angajati)
Order by salariu

--salariu mediu al tuturor angajatiilor cu functie de pana acum 
SELECT AVG(salariu),idfunctie
FROM angajati
GROUP BY idfunctie
ORDER BY 1

--salariul mediu doar daca acesta este mai mare decat 4000
SELECT avg(salariu)
FROM angajati
HAVING avg(salariu)>4000

--suma salariilor pe functii in cadrul cofetariilor
SELECT sum(salariu),idfunctie,idcofetarie
FROM angajati
GROUP BY idfunctie, idcofetarie
ORDER BY 2    --se ordoneaza dupa coloana 2, adica dupa idfunctie

--vedere in care se afiseaza angajatii cu salariul < 3000
--eligibili pt marirea de salariu
CREATE VIEW angajati_eligibili_marire_salariu(idangajat,nume, prenume ) 
AS ( SELECT idangajat, nume, prenume
     DISTINCT FROM angajati
     WHERE idangajat NOT IN (SELECT idangajat
				             FROM angajati
				             WHERE salariu > 3000)
)
drop view angajati_eligibili_marire_salariu
select * from angajati_eligibili_marire_salariu


--id-urile cofetariilor unde exista livratori
--si numele livratorilor
SELECT angajati.nume, prenume, idcofetarie
FROM angajati
WHERE EXISTS (SELECT idfunctie
              FROM functie
              WHERE angajati.idfunctie = functie.idfunctie AND idfunctie = 4)
order by idcofetarie

--afisam clientii si nr comenzilor fiecaruia
--ordonam crescator
select clienti.idclient, clienti.nume, comanda.nrcomanda, cantitate
from clienti
inner join comanda ON clienti.idclient = comanda.idclient order by comanda.nrcomanda asc

--afiseaza numarul total de angajati
SELECT COUNT(*) FROM angajati

--numele si prenumele angajatilor care sunt patroni, din toate cofetariile
select nume, prenume, idcofetarie, denumirefunctie
from angajati inner join functie on functie.IdFunctie = 10 AND angajati.IdFunctie = 10
order by idcofetarie asc

--afisarea clientilor care au comandat fursecuri cu ovaz
select distinct clienti.idclient, clienti.nume
from clienti inner join comanda on clienti.idclient = comanda.idclient
where comanda.idprodus = 10

--afisarea produselor care contin ingredientele faina sau nuci
select distinct produs.idprodus, produs.denumireprodus
from contin inner join produs on produs.idprodus = contin.idprodus
where contin.idingredient = 5 or contin.idingredient = 12

select * from angajati, functie
select distinct * from angajati cross join functie

--numele angajatilor care lucreaza la fiecare cofetarie
--chiar daca unelele cofetarii nu au inca angajati
SELECT a.idangajat, a.nume, c.idcofetarie
FROM angajati a full outer join cofetarie c on a.idcofetarie = c.idcofetarie
order by idcofetarie

--liniile cu nume duplicat sunt grupate sub acelasi nume
--si salariul lor corespunzator este suma salariului randurilor duplicate
select nume, sum(salariu)
from angajati
group by nume

--denumirea si gramajul fiecarui produs
--grupat dupa idprodus
SELECT idprodus, denumireprodus, gramaj 
FROM produs
Group BY idprodus
order by idprodus

--cauta angajatii care au suma salariilor < 2000 
--si grupeaza dupa nume
SELECT nume, SUM(salariu) FROM angajati
GROUP BY nume  
HAVING SUM(salariu)<2000;   

--numaram cate produse avem din fiecare tip
SELECT tipprodus, COUNT(*) AS total_products
FROM produs
WHERE tipprodus IS NOT NULL
GROUP BY tipprodus
ORDER BY tipprodus

--cel mai mare salariu de la fiecare cofetarie
SELECT distinct angajati.idcofetarie, MAX(salariu) AS highest_salary
FROM angajati
GROUP BY angajati.idcofetarie
order by idcofetarie

--vizualizam angajatii care au acelasi nume de familie
--si numaram la fiecare
CREATE VIEW nrangajati AS SELECT nume, Count(*) as nrangajati 
                          FROM  angajati 
                          group by nume
                          order by nrangajati desc














